/*
Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function would be added by GfG's Online Judge.*/

// A Binary Tree node
/* class Node
{
    int data;
    Node left, right, nextRight;
    Node(int item)
    {
        data = item;
        left = right = nextRight = null;
		
    }
} */

class GfG
{
    void connect(Node root)
    {
        // Your code here
        java.util.Queue<Node> q1 = new java.util.LinkedList<Node>();
        java.util.Queue<Node> q2 = new java.util.LinkedList<Node>();
        q1.add(root);
        while(q1.size()!=0||q2.size()!=0)
        {
            if(q2.size()==0)
            {
                Node last = null;
                while(q1.size()!=0)
                {
                    Node n =  q1.poll();
                    if(n==null)
                    {
                        if(last==null)
                        continue;
                        else
                        {
                        last.nextRight = null;
                        continue;
                        }
                    }
                    if(!(last==null))
                    last.nextRight = n;
                    last = n;
                    if(n.left==null&&n.right==null)
                    continue;
                    else
                    {
                        q2.add(n.left);
                        q2.add(n.right);
                    }
                }
                last.nextRight = null;
            }
            else
            {
                Node last = null;
                while(q2.size()!=0)
                {
                    Node n = q2.poll();
                    if(n==null)
                    {
                        if(last==null)
                        continue;
                        else
                        {
                        last.nextRight = null;
                        continue;
                        }
                    }
                    if(!(last==null))
                    last.nextRight = n;
                    last = n;
                    if(n.left==null&&n.right==null)
                    continue;
                    else
                    {
                        q1.add(n.left);
                        q1.add(n.right);
                    }
                }
                last.nextRight = null;
            }
        }
    }
}
